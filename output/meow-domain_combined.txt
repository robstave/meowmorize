package main

import (
	"log"
	"net/http"
	"os"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	_ "github.com/robstave/meowmorize/docs" // Import the docs generated by Swag
	"github.com/robstave/meowmorize/internal/adapters/controller"
	"github.com/robstave/meowmorize/internal/adapters/repositories"
	"github.com/robstave/meowmorize/internal/domain"
	"github.com/robstave/meowmorize/internal/domain/types"
	"github.com/robstave/meowmorize/internal/logger"
	httpSwagger "github.com/swaggo/echo-swagger" // Import Swagger middleware
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// @title MeowMorize Flashcard API
// @version 1.0
// @description API documentation for the MeowMorize Flashcard App.
// @host 192.168.86.176:8789
// @BasePath /api
func main() {
	// Initialize Logger
	slogger := logger.InitializeLogger()
	logger.SetLogger(slogger) // Optional: If you prefer setting a package-level logger

	// Initialize Database
	dbPath := "./meowmerize.db"
	if path := os.Getenv("DB_PATH"); path != "" {
		dbPath = path
	}
	db, err := gorm.Open(sqlite.Open(dbPath), &gorm.Config{})
	if err != nil {
		slogger.Error("Failed to connect to database", "error", err)
		log.Fatalf("Failed to connect to database: %v", err)
	}

	err = db.AutoMigrate(&types.Deck{}, &types.Card{})
	if err != nil {
		slogger.Error("Failed to migrate database", "error", err)
		log.Fatalf("Failed to migrate database: %v", err)
	}

	// Initialize Repositories
	deckRepo := repositories.NewDeckRepositorySQLite(db)
	cardRepo := repositories.NewCardRepositorySQLite(db)

	// Initialize Service
	service := domain.NewService(slogger, deckRepo, cardRepo)

	// Initialize Controller
	meowController := controller.NewMeowController(service, slogger)

	// Initialize Echo
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.Use(middleware.CORS())
	/*
		e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
			AllowOrigins: []string{"*", "http://localhost:8789", "http://192.168.86.176:8789", "http://localhost:3000"}, // Update as needed
			AllowMethods: []string{echo.GET, echo.POST, echo.PUT, echo.DELETE, echo.OPTIONS},
			AllowHeaders: []string{
				"Content-Type",
				"Authorization",
			},
		}))
	*/

	// Routes
	api := e.Group("/api")
	deckGroup := api.Group("/decks")

	deckGroup.GET("", meowController.GetAllDecks)
	deckGroup.GET("/default", meowController.CreateDefaultDeck)
	deckGroup.GET("/:id", meowController.GetDeckByID)
	deckGroup.POST("", meowController.CreateDeck)
	deckGroup.PUT("/:id", meowController.UpdateDeck)
	deckGroup.DELETE("/:id", meowController.DeleteDeck)

	deckGroup.POST("/import", meowController.ImportDeck)

	// Swagger endpoint
	e.GET("/swagger/*", httpSwagger.WrapHandler)

	// Start Server
	port := "8789"
	if p := os.Getenv("PORT"); p != "" {
		port = p
	}
	slogger.Info("Starting server", "port", port)
	if err := e.Start(":" + port); err != nil && err != http.ErrServerClosed {
		slogger.Error("Shutting down the server", "error", err)
		log.Fatalf("Shutting down the server: %v", err)
	}
}


=== End of cmd/main/main.go ===

package types

type Card struct {
	ID     string `gorm:"primaryKey" json:"id"`
	DeckID string `gorm:"not null" json:"deck_id"`
	Front  struct {
		Text string `gorm:"type:text;not null" json:"text"`
	} `gorm:"embedded;embeddedPrefix:front_" json:"front"` // Embedded field for 'front' details
	Back struct {
		Text string `gorm:"type:text;not null" json:"text"`
	} `gorm:"embedded;embeddedPrefix:back_" json:"back"` // Embedded field for 'back' details
}


=== End of internal/domain/types/card.go ===

package types

type Deck struct {
	ID          string `gorm:"primaryKey" json:"id"` // UUID string as the primary key
	Name        string `gorm:"type:varchar(100);not null" json:"name"`
	Cards       []Card `gorm:"foreignKey:DeckID" json:"cards"`
	Description string `gorm:"type:text" json:"description"` // New Description field

}


=== End of internal/domain/types/deck.go ===

package domain

import (
	"github.com/robstave/meowmorize/internal/domain/types"
)

func (s *Service) CreateDeck(deck types.Deck) error {

	for _, card := range deck.Cards {
		s.logger.Info("Imported Card",
			"uuid", card.ID,
			"did", card.DeckID,
			"front", card.Front.Text,
			"back", card.Back.Text)
	}

	err := s.deckRepo.CreateDeck(deck)
	if err != nil {
		s.logger.Error("Failed to create deck", "error", err)
		return err
	}

	s.logger.Info("Deck created successfully")
	return nil
}

// DeleteDeck deletes a deck by its ID
func (s *Service) DeleteDeck(deckID string) error {
	err := s.deckRepo.DeleteDeck(deckID)
	if err != nil {
		s.logger.Error("Failed to delete deck", "deck_id", deckID, "error", err)
		return err
	}

	s.logger.Info("Deck deleted successfully", "deck_id", deckID)
	return nil
}

// GetDeckByID retrieves a deck by its ID
func (s *Service) GetDeckByID(deckID string) (types.Deck, error) {
	deck, err := s.deckRepo.GetDeckByID(deckID)
	if err != nil {
		s.logger.Error("Failed to get deck by ID", "deck_id", deckID, "error", err)
		return types.Deck{}, err
	}
	return deck, nil
}

func (s *Service) GetAllDecks() ([]types.Deck, error) {
	decks, err := s.deckRepo.GetAllDecks()
	if err != nil {
		s.logger.Error("Failed to retrieve decks", "error", err)
		return nil, err
	}
	return decks, nil
}

func (s *Service) UpdateDeck(deck types.Deck) error {
	err := s.deckRepo.UpdateDeck(deck)
	if err != nil {
		s.logger.Error("Failed to update deck", "error", err)
		return err
	}
	s.logger.Info("Deck updated successfully", "deck_id", deck.ID)
	return nil
}


=== End of internal/domain/create.go ===

package domain

import (
	"github.com/robstave/meowmorize/internal/domain/types"

	"github.com/google/uuid"
)

// CreateDefaultDeck creates a default deck with a sample card
func (s *Service) CreateDefaultDeck() error {
	// Generate a UUID for the default deck
	deckID := uuid.New().String()

	defaultDeck := types.Deck{
		ID:          deckID,
		Name:        "Default Deck",
		Description: "This is the default deck containing basic cards.",

		Cards: []types.Card{
			{
				ID:     uuid.New().String(), // Generate a UUID for the card
				DeckID: deckID,

				Front: struct {
					Text string `gorm:"type:text;not null" json:"text"`
				}{
					Text: "Capital of France",
				},
				Back: struct {
					Text string `gorm:"type:text;not null" json:"text"`
				}{
					Text: "Paris",
				},
			},
			{
				ID:     uuid.New().String(), // Generate a UUID for the card
				DeckID: deckID,

				Front: struct {
					Text string `gorm:"type:text;not null" json:"text"`
				}{
					Text: "Capital of Norway",
				},
				Back: struct {
					Text string `gorm:"type:text;not null" json:"text"`
				}{
					Text: "Oslo",
				},
			},
		},
	}

	// Save the default deck to the database
	err := s.deckRepo.CreateDeck(defaultDeck)
	if err != nil {
		s.logger.Error("Failed to create default deck", "error", err)
		return err
	}

	s.logger.Info("Default deck created successfully")
	return nil
}


=== End of internal/domain/default.go ===

package domain

import (
	"log/slog"

	"github.com/robstave/meowmorize/internal/adapters/repositories"
	"github.com/robstave/meowmorize/internal/domain/types"
)

type Service struct {
	logger   *slog.Logger
	deckRepo repositories.DeckRepository
	cardRepo repositories.CardRepository
}

type MeowDomain interface {
	GetAllDecks() ([]types.Deck, error)
	CreateDefaultDeck() error
	CreateDeck(types.Deck) error
	GetDeckByID(deckID string) (types.Deck, error)
	DeleteDeck(deckID string) error
	UpdateDeck(deck types.Deck) error // New method
}

func NewService(logger *slog.Logger, deckRepo repositories.DeckRepository, cardRepo repositories.CardRepository) MeowDomain {
	return &Service{
		logger:   logger,
		deckRepo: deckRepo,
		cardRepo: cardRepo,
	}
}


=== End of internal/domain/service.go ===

