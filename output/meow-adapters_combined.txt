package controller

import (
	"github.com/labstack/echo/v4"
)

// DeleteDeck handles the deletion of a deck
func (hc *HomeController) DeleteDeck(c echo.Context) error {
	deckID := c.Param("id")

	// Perform deletion
	err := hc.service.DeleteDeck(deckID)

	//TODO
}


=== End of internal/adapters/controller/deck.go ===

package controller

import (
	"log/slog"

	"github.com/robstave/meowmorize/internal/domain"
)

type HomeController struct {
	service domain.BLL
	logger  *slog.Logger
}

func NewHomeController(service domain.BLL, logger *slog.Logger) *HomeController {
	return &HomeController{service: service, logger: logger}
}


=== End of internal/adapters/controller/home.go ===

package controller

import (
	"encoding/json"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/robstave/meowmorize/internal/domain/types"
)

// ImportDeck handles the import deck POST request
func (hc *HomeController) ImportDeck(c echo.Context) error {

	hc.logger.Info("Importing deck")

	// Read JSON from file upload
	file, err := c.FormFile("deck_file")
	if err != nil {
		hc.logger.Error("Failed to read deck file", "error", err)
		return //error  todo
	}

	src, err := file.Open()
	if err != nil {
		hc.logger.Error("Failed to open file", "error", err)
		return //error  todo
	}
	defer src.Close()

	var deckData struct {
		Deck types.Deck `json:"deck"`
	}

	hc.logger.Info("Decoding")

	if err := json.NewDecoder(src).Decode(&deckData); err != nil {
		hc.logger.Error("JSON decoding failed", "error", err)
		return c.Redirect(http.StatusSeeOther, "/import-deck?import=error")
	}

	// Logging for debugging
	hc.logger.Info("Imported deck", "id", deckData.Deck.ID, "name", deckData.Deck.Name,
		"number_of_cards", len(deckData.Deck.Cards))
	for _, card := range deckData.Deck.Cards {
		if card.ID == "" || card.DeckID == "" || card.Front.Text == "" || card.Back.Text == "" {
			hc.logger.Warn("Incomplete card data", "card", card)
		} else {
			hc.logger.Info("Imported Card",
				"uuid", card.ID,
				"did", card.DeckID,
				"front", card.Front.Text,
				"back", card.Back.Text)
		}
	}

	// Assign DeckID to each card if not already set
	for i := range deckData.Deck.Cards {
		if deckData.Deck.Cards[i].DeckID == "" {
			deckData.Deck.Cards[i].DeckID = deckData.Deck.ID
		}
	}

	// Save the deck to the database
	if err := hc.service.CreateDeck(deckData.Deck); err != nil {
		hc.logger.Error("Failed to save deck", "error", err)
		return c.Redirect(http.StatusSeeOther, "/import-deck?import=error")
	}

	///TODO
}


=== End of internal/adapters/controller/import.go ===

package repositories

import (
	"github.com/robstave/meowmorize/internal/domain/types"

	"gorm.io/gorm"
)

type CardRepository interface {
	GetCardsByDeckID(deckID string) ([]types.Card, error)
	CreateCard(card types.Card) error
}

type CardRepositorySQLite struct {
	db *gorm.DB
}

func NewCardRepositorySQLite(db *gorm.DB) CardRepository {
	return &CardRepositorySQLite{db: db}
}

func (r *CardRepositorySQLite) GetCardsByDeckID(deckID string) ([]types.Card, error) {
	var cards []types.Card
	if err := r.db.Where("deck_id = ?", deckID).Find(&cards).Error; err != nil {
		return nil, err
	}
	return cards, nil
}

func (r *CardRepositorySQLite) CreateCard(card types.Card) error {
	return r.db.Create(&card).Error
}


=== End of internal/adapters/repositories/card.go ===

package repositories

import (
	"github.com/robstave/meowmorize/internal/domain/types"

	"gorm.io/gorm"
)

type DeckRepository interface {
	GetAllDecks() ([]types.Deck, error)
	CreateDeck(deck types.Deck) error
	DeleteDeck(deckID string) error // New method
	GetDeckByID(deckID string) (types.Deck, error)
}

type DeckRepositorySQLite struct {
	db *gorm.DB
}

func NewDeckRepositorySQLite(db *gorm.DB) DeckRepository {
	return &DeckRepositorySQLite{db: db}
}

func (r *DeckRepositorySQLite) GetAllDecks() ([]types.Deck, error) {
	var decks []types.Deck
	if err := r.db.Preload("Cards").Find(&decks).Error; err != nil {
		return nil, err
	}
	return decks, nil
}

func (r *DeckRepositorySQLite) CreateDeck(deck types.Deck) error {
	return r.db.Create(&deck).Error
}

func (r *DeckRepositorySQLite) GetDeckByID(deckID string) (types.Deck, error) {
	var deck types.Deck
	if err := r.db.Preload("Cards").Where("id = ?", deckID).First(&deck).Error; err != nil {
		return types.Deck{}, err
	}
	return deck, nil
}

func (r *DeckRepositorySQLite) DeleteDeck(deckID string) error {
	// Begin a transaction to ensure both deck and its cards are deleted atomically
	tx := r.db.Begin()
	if tx.Error != nil {
		return tx.Error
	}

	// Delete associated cards first to maintain referential integrity
	if err := tx.Where("deck_id = ?", deckID).Delete(&types.Card{}).Error; err != nil {
		tx.Rollback()
		return err
	}

	// Delete the deck
	if err := tx.Where("id = ?", deckID).Delete(&types.Deck{}).Error; err != nil {
		tx.Rollback()
		return err
	}

	// Commit the transaction
	return tx.Commit().Error
}


=== End of internal/adapters/repositories/deck.go ===

