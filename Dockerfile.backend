# Dockerfile.backend

# Stage 1: Build the Go application
FROM golang:1.23-alpine AS builder


 
# Set build arguments
ARG CACHEBUST=1
ENV CGO_ENABLED=1 GOOS=linux GOARCH=amd64

# Set environment variables
ENV GO111MODULE=on  

# Install necessary packages
RUN apk update && apk add --no-cache git gcc musl-dev

# Set the working directory inside the container
WORKDIR /app

# Copy go.mod and go.sum files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy the entire project
COPY . .

# Build the Go application
RUN go build -o backend ./cmd/main/main.go

# Stage 2: Create the final image
FROM alpine:latest

# Install necessary packages
RUN apk --no-cache add ca-certificates sqlite-libs


# Set the working directory
WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /app/backend .

# Create a directory for the SQLite database
# Create a directory for data
RUN mkdir -p /app/data

# Expose the backend port
EXPOSE 8789
EXPOSE 8080
# Set environment variables if needed
ENV DB_PATH=/app/data/db.sqlite3

# Add a non-root user for security
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Change ownership of the app directory
RUN chown -R appuser:appgroup /app

# Switch to the non-root user
USER appuser

# Command to run the executable
CMD ["./backend"]
