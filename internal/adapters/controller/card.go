// controllers/meow_controller.go
package controller

import (
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/robstave/meowmorize/internal/domain/types"
)

// GetCardByID retrieves a card by its ID
// @Summary Get a card by ID
// @Description Retrieve a single card by its ID
// @Tags Cards
// @Produce  json
// @Param id path string true "Card ID"
// @Success 200 {object} types.Card
// @Failure 400 {object} map[string]string
// @Failure 404 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /cards/{id} [get]
func (hc *MeowController) GetCardByID(c echo.Context) error {
	cardID := c.Param("id")

	card, err := hc.service.GetCardByID(cardID)
	if err != nil {
		if err.Error() == "card not found" {
			hc.logger.Warn("Card not found", "cardID", cardID)
			return c.JSON(http.StatusNotFound, echo.Map{
				"message": "Card not found",
			})
		}

		hc.logger.Error("Failed to get card by ID", "error", err)
		return c.JSON(http.StatusInternalServerError, echo.Map{
			"message": "Failed to retrieve card",
		})
	}

	return c.JSON(http.StatusOK, card)
}

// CreateCardRequest represents the expected payload for creating a card
type CreateCardRequest struct {
	DeckID string         `json:"deck_id" validate:"required,uuid"`
	Front  CardContentReq `json:"front" validate:"required"`
	Back   CardContentReq `json:"back" validate:"required"`
	Link   string         `json:"link"`
}

// CardContentReq represents the content structure for front and back of a card
type CardContentReq struct {
	Text string `json:"text" validate:"required"`
}

// UpdateCardRequest represents the expected payload for updating a card
type UpdateCardRequest struct {
	Front *CardContentReq `json:"front"`
	Back  *CardContentReq `json:"back"`
	Link  *string         `json:"link"`
}

// @Summary Create a new card
// @Description Create a new card and associate it with a deck
// @Tags cards
// @Accept json
// @Produce json
// @Param card body CreateCardRequest true "Create Card"
// @Success 201 {object} types.Card
// @Failure 400 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /cards [post]
func (c *MeowController) CreateCard(ctx echo.Context) error {
	var req CreateCardRequest
	if err := ctx.Bind(&req); err != nil {
		c.logger.Error("Failed to bind request", "error", err)
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request payload")
	}

	// Optional: Add validation here if using a validation library
	// e.g., if err := ctx.Validate(req); err != nil { ... }

	// Create a Card object
	newCard := types.Card{
		// ID will be generated by the service or repository
		DeckID: req.DeckID,
		Front: types.CardFront{
			Text: req.Front.Text,
		},
		Back: types.CardBack{
			Text: req.Back.Text,
		},
		Link: req.Link,
	}

	// Call the service to create the card
	ccard, err := c.service.CreateCard(newCard)
	if err != nil {
		c.logger.Error("Failed to create card", "error", err)
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to create card")
	}

	newCard.ID = ccard.ID

	c.logger.Info("Card created successfully", "deck_id", newCard.DeckID)
	return ctx.JSON(http.StatusCreated, newCard)
}

// @Summary Update an existing card
// @Description Update the details of an existing card by its ID
// @Tags cards
// @Accept json
// @Produce json
// @Param id path string true "Card ID"
// @Param card body UpdateCardRequest true "Update Card"
// @Success 200 {object} types.Card
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /cards/{id} [put]
func (c *MeowController) UpdateCard(ctx echo.Context) error {
	cardID := ctx.Param("id")
	if cardID == "" {
		return echo.NewHTTPError(http.StatusBadRequest, "Card ID is required")
	}

	var req UpdateCardRequest
	if err := ctx.Bind(&req); err != nil {
		c.logger.Error("Failed to bind request", "error", err)
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request payload")
	}

	// Retrieve the existing card
	existingCard, err := c.service.GetCardByID(cardID)
	if err != nil {
		c.logger.Error("Failed to retrieve card", "card_id", cardID, "error", err)
		return echo.NewHTTPError(http.StatusNotFound, "Card not found")
	}

	// Update the fields if they are provided
	if req.Front != nil {
		existingCard.Front.Text = req.Front.Text
	}
	if req.Back != nil {
		existingCard.Back.Text = req.Back.Text
	}
	if req.Link != nil {
		existingCard.Link = *req.Link
	}

	// Call the service to update the card
	if err := c.service.UpdateCard(*existingCard); err != nil {
		c.logger.Error("Failed to update card", "card_id", cardID, "error", err)
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to update card")
	}

	c.logger.Info("Card updated successfully", "card_id", cardID)
	return ctx.JSON(http.StatusOK, existingCard)
}
